/**
 * Smart Event Open API
 * Smart Event Open API documentation
 *
 * OpenAPI spec version: 2.0.15
 * Contact: info@smartevent.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CalculateResponse from '../model/CalculateResponse';
import GeneralError from '../model/GeneralError';
import Order from '../model/Order';

/**
* Orders service.
* @module api/OrdersApi
* @version 2.0.15
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the orderCreate operation.
     * @callback module:api/OrdersApi~orderCreateCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create order in system
     * This endpoint will allow you to create new order in system. Will return tokenValue.
     * @param {Object} opts Optional parameters
     * @param {module:api/OrdersApi~orderCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    orderCreate(customerName, customerSurname, customerPhone, customerEmail, deliveryName, deliverySurname, deliveryPhone, channelCode, id, qty, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'participant_name[]': this.apiClient.buildCollectionParam(opts['participantName'], 'multi'),
        'participant_surname[]': this.apiClient.buildCollectionParam(opts['participantSurname'], 'multi'),
        'participant_email[]': this.apiClient.buildCollectionParam(opts['participantEmail'], 'multi'),
        'participant_phone[]': this.apiClient.buildCollectionParam(opts['participantPhone'], 'multi'),
        'participant_comment[]': this.apiClient.buildCollectionParam(opts['participantComment'], 'multi'),
        'participant_clothes_size[]': this.apiClient.buildCollectionParam(opts['participantClothesSize'], 'multi'),
        'customer_company': opts['customerCompany'],
        'customer_name': customerName,
        'customer_surname': customerSurname,
        'customer_phone': customerPhone,
        'customer_email': customerEmail,
        'customer_street': opts['customerStreet'],
        'customer_city': opts['customerCity'],
        'customer_postcode': opts['customerPostcode'],
        'customer_country_code': opts['customerCountryCode'],
        'customer_vatid': opts['customerVatid'],
        'customer_newsletter': opts['customerNewsletter'],
        'customer_facebook': opts['customerFacebook'],
        'customer_linkedin': opts['customerLinkedin'],
        'customer_twitter': opts['customerTwitter'],
        'customer_instagram': opts['customerInstagram'],
        'customer_googleplus': opts['customerGoogleplus'],
        'delivery_company': opts['deliveryCompany'],
        'delivery_name': deliveryName,
        'delivery_surname': deliverySurname,
        'delivery_phone': deliveryPhone,
        'delivery_street': opts['deliveryStreet'],
        'delivery_city': opts['deliveryCity'],
        'delivery_postcode': opts['deliveryPostcode'],
        'delivery_country_code': opts['deliveryCountryCode'],
        'delivery_vatid': opts['deliveryVatid'],
        'notes': opts['notes'],
        '_channel_code': channelCode,
        'currency_code': opts['currencyCode'],
        'locale_code': opts['localeCode'],
        'coupon': opts['coupon'],
        'ref': opts['ref'],
        '_ga': opts['ga'],
        'id[]': this.apiClient.buildCollectionParam(id, 'multi'),
        'qty[]': this.apiClient.buildCollectionParam(qty, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/order/create', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the orderGetByToken operation.
     * @callback module:api/OrdersApi~orderGetByTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about created order
     * This endpoint will response with all order details
     * @param {module:api/OrdersApi~orderGetByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    orderGetByToken(tokenValue, callback) {
      let postBody = null;

      let pathParams = {
        'tokenValue': tokenValue
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;

      return this.apiClient.callApi(
        '/order/{tokenValue}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the orderGetCalculation operation.
     * @callback module:api/OrdersApi~orderGetCalculationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalculateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate order
     * This endpoint will allow you to get order totals.
     * @param {module:api/OrdersApi~orderGetCalculationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalculateResponse}
     */
    orderGetCalculation(id, qty, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id[]': this.apiClient.buildCollectionParam(id, 'multi'),
        'qty[]': this.apiClient.buildCollectionParam(qty, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalculateResponse;

      return this.apiClient.callApi(
        '/order/calculate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
