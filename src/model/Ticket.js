/**
 * Smart Event Open API
 * Smart Event Open API documentation
 *
 * OpenAPI spec version: 2.0.12
 * Contact: info@smartevent.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelPricing from './ChannelPricing';
import TaxCategory from './TaxCategory';
import TranslationTicket from './TranslationTicket';

/**
* The Ticket model module.
* @module model/Ticket
* @version 2.0.12
*/
export default class Ticket {
    /**
    * Constructs a new <code>Ticket</code>.
    * @alias module:model/Ticket
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Ticket</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Ticket} obj Optional instance to populate.
    * @return {module:model/Ticket} The populated <code>Ticket</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Ticket();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('on_hold')) {
                obj['on_hold'] = ApiClient.convertToType(data['on_hold'], 'Number');
            }
            if (data.hasOwnProperty('on_hand')) {
                obj['on_hand'] = ApiClient.convertToType(data['on_hand'], 'Number');
            }
            if (data.hasOwnProperty('tracked')) {
                obj['tracked'] = ApiClient.convertToType(data['tracked'], 'Boolean');
            }
            if (data.hasOwnProperty('visible_after_sold_out')) {
                obj['visible_after_sold_out'] = ApiClient.convertToType(data['visible_after_sold_out'], 'Boolean');
            }
            if (data.hasOwnProperty('salable_after_sold_out')) {
                obj['salable_after_sold_out'] = ApiClient.convertToType(data['salable_after_sold_out'], 'Boolean');
            }
            if (data.hasOwnProperty('tax_category')) {
                obj['tax_category'] = TaxCategory.constructFromObject(data['tax_category']);
            }
            if (data.hasOwnProperty('channel_pricings')) {
                obj['channel_pricings'] = ApiClient.convertToType(data['channel_pricings'], {'String': ChannelPricing});
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], {'String': TranslationTicket});
            }
        }
        return obj;
    }

    /**
    * @member {Number} id
    */
    id = undefined;
    /**
    * @member {String} code
    */
    code = undefined;
    /**
    * Number of sold tickets
    * @member {Number} on_hold
    */
    on_hold = undefined;
    /**
    * Number of available tickets
    * @member {Number} on_hand
    */
    on_hand = undefined;
    /**
    * @member {Boolean} tracked
    */
    tracked = undefined;
    /**
    * @member {Boolean} visible_after_sold_out
    */
    visible_after_sold_out = undefined;
    /**
    * @member {Boolean} salable_after_sold_out
    */
    salable_after_sold_out = undefined;
    /**
    * @member {module:model/TaxCategory} tax_category
    */
    tax_category = undefined;
    /**
    * Keys reference to code of a channel
    * @member {Object.<String, module:model/ChannelPricing>} channel_pricings
    */
    channel_pricings = undefined;
    /**
    * Keys reference to code of a translation
    * @member {Object.<String, module:model/TranslationTicket>} translations
    */
    translations = undefined;




}
