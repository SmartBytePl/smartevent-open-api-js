/**
 * Smart Event Open API
 * Smart Event Open API documentation
 *
 * OpenAPI spec version: 2.0.8
 * Contact: info@smartevent.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SmartEventOpenApi);
  }
}(this, function(expect, SmartEventOpenApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SmartEventOpenApi.Event();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Event', function() {
    it('should create an instance of Event', function() {
      // uncomment below and update the code to test Event
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be.a(SmartEventOpenApi.Event);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property salable (base name: "salable")', function() {
      // uncomment below and update the code to test the property salable
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property visible (base name: "visible")', function() {
      // uncomment below and update the code to test the property visible
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property finished (base name: "finished")', function() {
      // uncomment below and update the code to test the property finished
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property daysCount (base name: "days_count")', function() {
      // uncomment below and update the code to test the property daysCount
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property availableFrom (base name: "available_from")', function() {
      // uncomment below and update the code to test the property availableFrom
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property availableUntil (base name: "available_until")', function() {
      // uncomment below and update the code to test the property availableUntil
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property beginDate (base name: "begin_date")', function() {
      // uncomment below and update the code to test the property beginDate
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "end_date")', function() {
      // uncomment below and update the code to test the property endDate
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property visibleFrom (base name: "visible_from")', function() {
      // uncomment below and update the code to test the property visibleFrom
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property visibleUntil (base name: "visible_until")', function() {
      // uncomment below and update the code to test the property visibleUntil
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property translations (base name: "translations")', function() {
      // uncomment below and update the code to test the property translations
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property tickets (base name: "tickets")', function() {
      // uncomment below and update the code to test the property tickets
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property images (base name: "images")', function() {
      // uncomment below and update the code to test the property images
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instane = new SmartEventOpenApi.Event();
      //expect(instance).to.be();
    });

  });

}));
