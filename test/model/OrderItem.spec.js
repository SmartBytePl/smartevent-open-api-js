/**
 * Smart Event Open API
 * Smart Event Open API documentation
 *
 * OpenAPI spec version: 2.0.11
 * Contact: info@smartevent.pl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SmartEventOpenApi);
  }
}(this, function(expect, SmartEventOpenApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SmartEventOpenApi.OrderItem();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrderItem', function() {
    it('should create an instance of OrderItem', function() {
      // uncomment below and update the code to test OrderItem
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be.a(SmartEventOpenApi.OrderItem);
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property unitPrice (base name: "unit_price")', function() {
      // uncomment below and update the code to test the property unitPrice
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property taxTotal (base name: "tax_total")', function() {
      // uncomment below and update the code to test the property taxTotal
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property subtotal (base name: "subtotal")', function() {
      // uncomment below and update the code to test the property subtotal
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property discountedUnitPrice (base name: "discounted_unit_price")', function() {
      // uncomment below and update the code to test the property discountedUnitPrice
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property adjustments (base name: "adjustments")', function() {
      // uncomment below and update the code to test the property adjustments
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property adjustmentsTotal (base name: "adjustments_total")', function() {
      // uncomment below and update the code to test the property adjustmentsTotal
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property adjustmentsTotalRecursively (base name: "adjustments_total_recursively")', function() {
      // uncomment below and update the code to test the property adjustmentsTotalRecursively
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property participant (base name: "participant")', function() {
      // uncomment below and update the code to test the property participant
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property ticket (base name: "ticket")', function() {
      // uncomment below and update the code to test the property ticket
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

    it('should have the property event (base name: "event")', function() {
      // uncomment below and update the code to test the property event
      //var instane = new SmartEventOpenApi.OrderItem();
      //expect(instance).to.be();
    });

  });

}));
